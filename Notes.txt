--> To comment, use //
--> To bring the pop up, alert("text");
--> JS treats all the numners as numbers(not a int, float, etc)
--> String is enclosed within double quotes
--> Booleans are smaller case true & false
--> There are two moew types of data types: undefined & null.
--> TO clear the console, clear()
--> Basic arithmetic operators are similar to python except "/" operator returns absolute float value.
-->Strings can be concated using "+" operator.
--> Escape sequences exists. eg: "/n", "/t" & "/" to escape somethiong in string.
--> "string".length returns the length of string.
--> "string"[index in number] return the position of individual char.
--> To define variable, use // var VarName = value;
--> To print in console, console.log("text to print")
--> To get user input, prompt("text to ask: ")
--> To store user input in variable, var temp = prompt("Enter something: ")
--> To connect js file to html, use <script src="file.js"></script>
--> All the logics can be written inside .js file, so that it will be displayed in html.
--> && - AND, || - OR, ! - NOT
--> <,>,,<=,>=
--> "2" == 2 will return true in js but it should not be (string cannot be equal to number). To get absolute result, 
use "2" === 2
--> if (condition) {logic to be executed} else if (condition) {logic to be executed} else {logic to be executed}
--> While (condition) {logic to be executed}
--> To break the loop, use break;
-->To increment, use x=x+1 or x+=1 or x++
--> There are three types of for loops. The basic one syntax is,
for (var i=0; i<5; i++){
	logic to be executed
}
--> Function syntax: function function_name(parameter1, parameter2){
	logic to be executed
}
--> when function_name() is entered, it will execute the function but if only function_name is typed, it will print the logic written in the function.
--> It is possible to assing the value to the variable like ,
function function_name(parameter1="Hello", parameter2="hello"){
	logic to be executed
}
--> var temp = function_name() will store the returned value from function.
--> var array_name =[1,2,3]
--> Indexing & replacing the elements in array is similar to python.
--> array_name.pop() to remove last element & array_name.push("4") to add the elemet to array at last.
--> Element inside array can have multiple datatypes & nested arrays are possible.
--> Array is mutable & String is immutable.
--> For/of loop: for (temp_variable of array_name){
	console.log(temp_variable)
}
This is similar to python for loop.
--> array_name.forEach(function_name) -- This will execte the function with each element of array each time.
--> Objects in js is similar to dict in python.
--> temp_dict={one="temp", two:2}
--> while declaring, the key values cannot be enclosed in quotes but while retrieving through index, it should be enclosed in quotes. eg: temp_dict["one"]
--> Objects is mutable.
--> console.dir(temp_dict) should â—‹7lso work.
--> Function can be written in place of value in js object. Eg:
var temp = {one="tt",
two: function(){
	return this.one
}}
--> This keyword is used to reference the key in that js object.
--> The function can be called separately as normal function. The function name is TWO.

**********************************************************************************************************************************************************************************************************************************************

Document Object Model:

--> Document object model is used to interface Java scrit code to interact with HTML.
--> console.dir(document) to get all the skeleton of the web page.
--> Few of the attributes are document.url, document.body, document.head & document.links.
--> Most used methods in DOM are, document.getElementById("id_name"), document..getElementByClassName("class_name"), document.getElementByTagName("tag_name"), document.querySelector("#id"), document..querySelectorAll(".class").
Note: the last two method uses CSS, pass ("#id") for id, (".class") for class name & ("tag") for tag name.
--> To change the color of header, 
var temp=document.getElementByTagName("h1")
temp.style.color='red'
-->The above methods will return complete tags once called. To modify the content, store that in var and try below,
var temp=document.getElementByTagName("h1")
temp.textContent="text to be changed"
temt.innerHTML = <strong> HTML to be changed </strong> -- TO use the HTML tag.
--> To get link(href), use
temp.getAttribute("href")
--> To change it to something, 
temp.setAttribute("href", "www.google.com")
--> addEventListener is used to add few more interaction to website.
varible.addEventListener("event", function(){
	// logic to the event
})
